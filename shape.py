import tkinter as tk
import math

class Shape:
    def __init__(self, polar_coords: list[tuple[float, float]]):
        self.polar_coords = tuple(polar_coords)
        self.resolution = 360 / len(self.polar_coords)
        self.start = self.polar_coords[0][0]

    def rotate(self, delta):
        new = [((theta + delta) % 360, r) for theta, r in self.polar_coords]
        new.sort()
        return Shape(new)

    def __call__(self, theta):
        if theta < self.start:
            x = -1
        else:
            x = int((theta - self.polar_coords[0][0]) / self.resolution)

        angle1, r1 = self.polar_coords[x]
        angle2, r2 = self.polar_coords[(x + 1) % len(self.polar_coords)]

        x1 = r1 * math.cos(math.radians(angle1))
        y1 = r1 * math.sin(math.radians(angle1))

        x2 = r2 * math.cos(math.radians(angle2))
        y2 = r2 * math.sin(math.radians(angle2))

        m = (y2 - y1) / (x2 - x1)
        c = y1 - m * x1
        M = math.tan(math.radians(theta))
        return abs(c) * math.sqrt(1 + M ** 2) / abs(M - m)

def polygon(n, r):
    delta_theta = 360 / n
    polar = [(i * delta_theta, r) for i in range(n)]
    return Shape(polar)

def merge(shape1, shape2, w):
    points = []
    n = 10_000
    res = 360 / n
    for i in range(n):
        theta = i * res
        r = shape1(theta) ** (1 - w) * shape2(theta) ** w
        points.append((theta, r))

    return Shape(points)

Q = Shape(
    ((0.0, 75.0), (1.8, 72.4546516895296), (3.6, 70.22539927822191), (5.4, 68.26838065393484), (7.2, 66.54841246935078), (9.0, 65.03702137134381), (10.8, 63.71099912459874), (12.6, 62.551327291228816), (14.4, 61.5423672690188), (16.2, 60.671244071818386), (18.0, 59.9273738461161), (19.8, 59.30209972893023), (21.6, 58.78841071281241), (23.400000000000002, 58.3807252370522), (25.2, 58.07472626247093), (27.0, 57.86723826175772), (28.8, 57.75613930481525), (30.6, 57.740303539293514), (32.4, 57.819571073700175), (34.2, 57.99474372292947), (36.0, 58.26760640014593), (37.800000000000004, 58.64097524519967), (39.6, 59.11877497645885), (41.4, 59.706149559582464), (43.2, 60.40961224917323), (45.0, 61.23724356957947), (46.800000000000004, 62.19894912615019), (48.6, 63.306793662232266), (50.4, 64.57543406873015), (52.2, 66.02268297255097), (54.0, 67.67024740668992), (55.800000000000004, 69.54470599270547), (57.6, 71.67881641760641), (59.4, 74.11328831270751), (61.2, 73.26551602088803), (63.0, 70.93627011936461), (64.8, 68.89279815876776), (66.60000000000001, 67.09727424979704), (68.4, 65.51917100684004), (70.2, 64.13366035181035), (72.0, 62.92042861824095), (73.8, 61.862787428109186), (75.60000000000001, 60.94699934090978), (77.4, 60.16176200012698), (79.2, 59.49781111528972), (81.0, 58.947613988254915), (82.8, 58.505133216020354), (84.60000000000001, 58.16564582633798), (86.4, 57.92560717439061), (88.2, 57.78255194646046), (90.0, 57.73502691896259), (91.8, 57.78255194646046), (93.60000000000001, 57.92560717439062), (95.4, 58.16564582633799), (97.2, 58.50513321602037), (99.0, 58.947613988254915), (100.8, 59.49781111528973), (102.60000000000001, 60.161762000127), (104.4, 60.9469993409098), (106.2, 61.86278742810919), (108.0, 62.92042861824096), (109.8, 64.13366035181036), (111.60000000000001, 65.51917100684005), (113.4, 67.09727424979705), (115.2, 68.89279815876777), (117.0, 70.93627011936462), (118.8, 73.26551602088803), (120.60000000000001, 74.11328831270747), (122.4, 71.67881641760636), (124.2, 69.54470599270545), (126.0, 67.6702474066899), (127.8, 66.02268297255094), (129.6, 64.57543406873012), (131.4, 63.30679366223224), (133.20000000000002, 62.19894912615017), (135.0, 61.23724356957945), (136.8, 60.40961224917319), (138.6, 59.70614955958244), (140.4, 59.11877497645882), (142.20000000000002, 58.640975245199655), (144.0, 58.267606400145915), (145.8, 57.99474372292945), (147.6, 57.81957107370016), (149.4, 57.74030353929351), (151.20000000000002, 57.75613930481522), (153.0, 57.867238261757706), (154.8, 58.07472626247093), (156.6, 58.3807252370522), (158.4, 58.78841071281241), (160.20000000000002, 59.30209972893022), (162.0, 59.927373846116076), (163.8, 60.67124407181839), (165.6, 61.54236726901878), (167.4, 62.551327291228816), (169.20000000000002, 63.71099912459874), (171.0, 65.03702137134383), (172.8, 66.54841246935078), (174.6, 68.26838065393484), (176.4, 70.22539927822193), (178.20000000000002, 72.45465168952961), (180.0, 75.0), (181.8, 72.45465168952957), (183.6, 70.2253992782219), (185.4, 68.26838065393481), (187.20000000000002, 66.54841246935075), (189.0, 65.0370213713438), (190.8, 63.710999124598715), (192.6, 62.55132729122879), (194.4, 61.54236726901877), (196.20000000000002, 60.67124407181838), (198.0, 59.92737384611608), (199.8, 59.302099728930216), (201.6, 58.7884107128124), (203.4, 58.38072523705219), (205.20000000000002, 58.07472626247094), (207.0, 57.86723826175772), (208.8, 57.75613930481522), (210.6, 57.74030353929351), (212.4, 57.81957107370017), (214.20000000000002, 57.99474372292946), (216.0, 58.26760640014591), (217.8, 58.64097524519967), (219.6, 59.118774976458845), (221.4, 59.70614955958246), (223.20000000000002, 60.40961224917323), (225.0, 61.23724356957946), (226.8, 62.1989491261502), (228.6, 63.30679366223225), (230.4, 64.57543406873013), (232.20000000000002, 66.02268297255097), (234.0, 67.67024740668992), (235.8, 69.54470599270552), (237.6, 71.67881641760637), (239.4, 74.11328831270754), (241.20000000000002, 73.265516020888), (243.0, 70.93627011936456), (244.8, 68.89279815876768), (246.6, 67.09727424979704), (248.4, 65.51917100683998), (250.20000000000002, 64.1336603518103), (252.0, 62.92042861824092), (253.8, 61.86278742810912), (255.6, 60.94699934090977), (257.40000000000003, 60.16176200012694), (259.2, 59.49781111528969), (261.0, 58.947613988254886), (262.8, 58.505133216020326), (264.6, 58.16564582633794), (266.40000000000003, 57.925607174390585), (268.2, 57.78255194646043), (270.0, 57.73502691896256), (271.8, 57.78255194646044), (273.6, 57.925607174390585), (275.40000000000003, 58.165645826337965), (277.2, 58.505133216020326), (279.0, 58.947613988254886), (280.8, 59.49781111528971), (282.6, 60.16176200012697), (284.40000000000003, 60.94699934090977), (286.2, 61.86278742810916), (288.0, 62.920428618240926), (289.8, 64.13366035181035), (291.6, 65.51917100684003), (293.40000000000003, 67.09727424979704), (295.2, 68.89279815876773), (297.0, 70.93627011936458), (298.8, 73.26551602088807), (300.6, 74.11328831270745), (302.40000000000003, 71.67881641760638), (304.2, 69.54470599270545), (306.0, 67.67024740668992), (307.8, 66.02268297255091), (309.6, 64.57543406873009), (311.40000000000003, 63.30679366223224), (313.2, 62.198949126150175), (315.0, 61.23724356957945), (316.8, 60.40961224917321), (318.6, 59.70614955958244), (320.40000000000003, 59.11877497645884), (322.2, 58.64097524519966), (324.0, 58.26760640014591), (325.8, 57.99474372292946), (327.6, 57.81957107370016), (329.40000000000003, 57.74030353929351), (331.2, 57.756139304815235), (333.0, 57.86723826175772), (334.8, 58.07472626247093), (336.6, 58.38072523705219), (338.40000000000003, 58.78841071281241), (340.2, 59.30209972893022), (342.0, 59.92737384611608), (343.8, 60.67124407181841), (345.6, 61.5423672690188), (347.40000000000003, 62.5513272912288), (349.2, 63.71099912459874), (351.0, 65.03702137134381), (352.8, 66.5484124693508), (354.6, 68.26838065393486), (356.40000000000003, 70.22539927822191), (358.2, 72.45465168952961))
)

R = 100
Triangle = Shape([(60, R), (60 + 120, R), (60 + 2 * 120, R)])
Square = Shape([(45, R), (45 + 90, R), (45 + 2 * 90, R), (45 + 3 * 90, R)])
S = [Square, Triangle, polygon(9, R)]
#S.append(Square)
S.append(merge(S[0], S[1], 0))

class Application:
    def __init__(self, master = None):
        self.master = master or tk.Tk()

        self.canvas = tk.Canvas(self.master, highlightthickness = 0)
        self.canvas.pack(fill = 'both', expand = True)

        self.shapes = {}
        self.add_shape(*S)

        self.master.bind('<Right>', lambda event: self.change(1))
        self.master.bind('<Left>', lambda event: self.change(-1))
        self.master.bind('<space>', lambda event: print(S[-1].polar_coords))
        self.canvas.bind('<Configure>', self.on_resize)

        self.merge = 0.5
    
    def on_resize(self, event = None):
        if event is None:
            width = int(self.canvas.winfo_width())
            height = int(self.canvas.winfo_height())
        else:
            width, height = event.width, event.height

        dx = width / len(self.shapes)
        dy = height / len(self.shapes)

        x = dx / 2
        y = height / 2

        for id, shape in self.shapes.items():
            self.draw_shape(id, shape, x, y)
            x += dx

    def add_shape(self, *shapes):
        for shape in shapes:
            id = self.create_shape()
            self.shapes[id] = shape

    def create_shape(self, **kwargs):
        id = self.canvas.create_polygon(0, 0, 0, 0, **kwargs)
        return id

    def draw_shape(self, id, shape, X, Y):
        coords = []
        for theta, r in shape.polar_coords:
            x = X + r * math.cos(math.radians(theta))
            y = Y + r * math.sin(math.radians(theta))

            coords.append((x, y))

        self.canvas.coords(id, *coords)

    def change(self, delta):
        self.merge += delta * 0.1
        if self.merge > 1:
            self.merge = 1
        elif self.merge < 0:
            self.merge = 0

        s = merge(S[0], S[1], self.merge)
        S[-1].polar_coords = s.polar_coords
        S[-1].resolution = s.resolution
        S[-1].start = s.start
        self.on_resize()

def main():
    root = tk.Tk()
    app = Application(root)

if __name__ == '__main__':
    main()